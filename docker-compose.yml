version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: membership_postgres
    environment:
      POSTGRES_HOST_AUTH_METHOD: trust
      POSTGRES_DB: membership
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: membership_redis
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    image: node:18-alpine
    container_name: membership_backend
    working_dir: /app
    volumes:
      - ./backend:/app
      - backend_node_modules:/app/node_modules
    command: sh -c "npm run migrate && npm run dev"
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: development
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: membership
      DB_USER: membership_user
      DB_PASSWORD: membership123
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: your_jwt_secret_here_change_this
      JWT_EXPIRY: 24h
      CORS_ORIGIN: http://eve-ng:5173
      LOQATE_API_KEY: ${LOQATE_API_KEY}
      SMARTSEARCH_API_KEY: ${SMARTSEARCH_API_KEY}
    command: sh -c "npm install && npm run dev"
    restart: unless-stopped

  frontend:
    image: node:18-alpine
    container_name: membership_frontend
    working_dir: /app
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
    ports:
      - "5173:5173"
    depends_on:
      - backend
    environment:
      NODE_ENV: development
      VITE_API_URL: http://eve-ng:3000/api
    command: sh -c "npm install && npm run dev -- --host 0.0.0.0"
    restart: unless-stopped

  # Optional: MinIO for file storage (S3-compatible)
  minio:
    image: minio/minio:latest
    container_name: membership_minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    command: server /data --console-address ":9001"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  nginx:
    image: nginx:alpine
    container_name: membership_nginx
    ports:
      - "8090:80"
      - "8843:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - default      

volumes:
  postgres_data:
    driver: local
  minio_data:
    driver: local
  backend_node_modules:
    driver: local
  frontend_node_modules:
    driver: local

networks:
  default:
    name: membership_network
    driver: bridge
